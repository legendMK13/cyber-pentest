from flask import Flask, render_template, request, redirect, url_for, send_from_directory, make_response
import sqlite3
import re

app = Flask(__name__)

# Hookup stylesheet
@app.route('/style.css')
def style():
    return send_from_directory('templates', 'style.css')


# Password checker to ensure we have requirements
def password_check(password):
    if len(password) < 8:
        return False
    elif not re.search("[a-zA-Z]", password):
        return False
    elif not re.search("[A-Z]", password):
        return False
    else:
        return True

def create_database():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            password TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

def add_user(username, password):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("INSERT INTO users (username, password) VALUES (?,?)", (username, password))
    conn.commit()
    conn.close()

def get_user(username, password):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
    user = c.fetchone()
    conn.close()
    return user

@app.route('/')
def index():
    response = make_response(render_template("index.html"))
    return response

@app.route("/signup", methods=["GET", "POST"])
def signup():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        if password_check(password):
            add_user(username, password)
            return redirect("/")
        else:
            return render_template("signup.html", error="Password must be at least 8 characters, include 1 letter, and 1 uppercase letter.")
    return render_template("signup.html")

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = get_user(username, password)
        if user:
            return redirect(url_for('user', username=username))
        else:
            error = "Invalid username or password. Please wait 5 seconds before trying again."

            #Set countdown timer of 5 seconds to prevent against brute-force attacks
            return render_template('login.html', error=error, countdown=5)
    return render_template('login.html')

@app.route('/user/<username>')
def user(username):
    return f'Hello, {username}!'

if __name__ == '__main__':
    create_database()
    app.run(debug=True)
